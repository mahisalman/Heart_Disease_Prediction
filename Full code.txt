at main.py file

from fastapi import FastAPI
import joblib
import numpy as np
from .schemas import HeartDiseaseInput as HeartFeatures

app = FastAPI(title="Heart Disease Prediction API", version="1.0")

# Load model
model = joblib.load("model/heart_model.joblib")

@app.get("/health")
def health():
    return {"status": "ok"}

@app.get("/info")
def info():
    return {
        "model": "RandomForestClassifier",
        "features": [
            "age", "sex", "cp", "trestbps", "chol", "fbs",
            "restecg", "thalach", "exang", "oldpeak", "slope", "ca", "thal"
        ]
    }

@app.post("/predict")
def predict(features: HeartFeatures):
    data = np.array([[features.age, features.sex, features.cp, features.trestbps, features.chol,
                      features.fbs, features.restecg, features.thalach, features.exang,
                      features.oldpeak, features.slope, features.ca, features.thal]])
    
    prediction = model.predict(data)[0]
    return {"heart_disease": bool(prediction)}


-----------------


at schemas.py file

# app/schemas.py
from pydantic import BaseModel

class HeartDiseaseInput(BaseModel):
    age: float
    sex: int
    cp: int
    trestbps: float
    chol: float
    fbs: int
    restecg: int
    thalach: float
    exang: int
    oldpeak: float
    slope: int
    ca: int
    thal: int


--------------------------

at model.py file

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
import joblib

# 1. Load dataset
df = pd.read_csv("heart.csv")  # from Kaggle dataset

# 2. Split features & labels
X = df.drop("target", axis=1)
y = df["target"]

# 3. Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 4. Train model
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# 5. Evaluate
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))

# 6. Save model
joblib.dump(model, "model/heart_model.joblib")
print("Model saved to model/heart_model.joblib")


------------------------


at docker file

# 1. Base image
FROM python:3.10-slim

# 2. Set working directory
WORKDIR /app

# 3. Install dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# 4. Copy project files
COPY . .

# 5. Expose port
EXPOSE 8000

# 6. Run app
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]


-------------------------------

at docker-compose.yml file

version: "3.9"

services:
  heart-api:
    build: .
    ports:
      - "8000:8000"


